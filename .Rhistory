names(gpd)
names(gdp)
gdp
gdp = read.csv("gdp.csv")
gdp
gdp = read.csv("gdp.csv")
gdp
names(gdp)
gdp
names(edu)
head(edu)
merged = merge(gdp, edu, by.x=X.2,by.y = Name, all=T)
merged = merge(gdp, edu, by.x="X.2",by.y = "Name", all=T)
merged = merge(gdp, edu, by.x="X.2",by.y = "Table.Name", all=T)
head(merged,10)
merged = merge(gdp, edu, by.x="X",by.y = "CountryCode", all=T)
length(merged)
names(gdp)
head(gdp)
select(gdp, ranking)
select(gdp, Gross.domestic.product.2012)
arrange(merged, desc(Gross.domestic.product.2012))
arrange(merged, desc(Gross.domestic.product.2012)) %>% select(CountryCode)
arrange(merged, desc(Gross.domestic.product.2012)) %>% select(Table.Name)
merged = merge(gdp, edu, by.x="X",by.y = "CountryCode")
length(merged)
arrange(merged, Gross.domestic.product.2012)
arrange(merged, desc(Gross.domestic.product.2012))
arrange(merged, desc(Gross.domestic.product.2012)) %>% select(X.2)
arrange(merged, desc(Gross.domestic.product.2012)) %>% select(X.2, Gross.domestic.product.2012)
merged %>% mutate(numRank = as.numeric(Gross.domestic.product.2012)) %>% arrange(merged, desc(numRank)) %>% select(X.2, numRank)
merged %>% mutate(numRank = as.numeric(Gross.domestic.product.2012)) %>% select(X.2, numRank) %>% arrange(numRank)
merged %>% mutate(numRank = as.numeric(Gross.domestic.product.2012)) %>% select(X.2, numRank) %>% arrange(desc(numRank))
sorted = merged %>% mutate(numRank = as.numeric(Gross.domestic.product.2012)) %>% select(X.2, numRank) %>% arrange(desc(numRank))
head(sorted, 13)
gdp
names(edu)
merged = merge(gdp, edu, by.x = "X", by.y="CountryCode")
str(merged)
merged = merge(gdp, edu, by.x = "X", by.y="CountryCode", all=T)
str(merged)
merged
select(merged, X, CountryCode)
names(merged)
select(merged, X, Long.Name)
merged = merge(gdp, edu, by.x = "X", by.y="CountryCode")
select(merged, X, Long.Name)
head(gdp)
head(gdp,20)
merged %>% arrange(Gross.domestic.product.2012)
merged %>% arrange(Gross.domestic.product.2012) %>% select(X)
merged %>% arrange(Gross.domestic.product.2012) %>% select(X, Gross.domestic.product.2012)
merged %>% mutate(Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012))
merged %>% mutate(Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012)) %>% select(X, Gross.domestic.product.2012)
merged %>% mutate(Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012)) %>% select(X, Gross.domestic.product.2012) %>% arrange(desc(Gross.domestic.product.2012))
filter(gdp, X=="ITA")
sorted = merged %>% mutate(Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012)) %>% select(X, Gross.domestic.product.2012) %>% arrange(desc(Gross.domestic.product.2012))
filter(sorted, X == ITA)
filter(sorted, X == "ITA")
names(edu)
filter(merged, X=="ITA")
sorted = merged %>% mutate(Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012)) %>% select(X, Gross.domestic.product.2012) %>% arrange(desc(Gross.domestic.product.2012))
head(sorted)
head(sorted,13)
head(gdp)
filter(sorted, X=="CHN")
filter(merged, X=="CHN")
select(merged, X, Gross.domestic.product.2012)
sorted = merged %>% select(X, Gross.domestic.product.2012) $>$ filter(!is.na(Gross.domestic.product.2012))
sorted = merged %>% select(X, Gross.domestic.product.2012) $>$ filter(Gross.domestic.product != NA)
sorted = merged %>% select(X, Gross.domestic.product.2012) %>% filter(Gross.domestic.product != NA)
sorted = merged %>% select(X, Gross.domestic.product.2012) %>% filter(Gross.domestic.product.2012 != NA)
sorted
sorted = merged %>% select(X, Gross.domestic.product.2012) %>% filter(!is.na(Gross.domestic.product.2012))
sorted
sorted = merged %>% select(X, Gross.domestic.product.2012) %>% mutate(Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012))
sorted
sorted = merged %>% select(X, Gross.domestic.product.2012) %>% mutate(NumRank = as.numeric(Gross.domestic.product.2012))
sorted
?as.numeric
gpd
str(gdp)
sorted = merged %>% select(X, Gross.domestic.product.2012) %>% mutate(NumRank = as.numeric(levels(Gross.domestic.product.2012)))
sorted
sorted = merged %>% select(X, Gross.domestic.product.2012)
sorted %>% mutate_each_(funs(as.factor(Gross.domestic.product.2012)))
sorted %>% mutate_each_(funs(as.factor, Gross.domestic.product.2012)
)
sorted %>% mutate_each_(funs(as.factor), Gross.domestic.product.2012)
sorted %>% mutate_each_(funs(as.numeric), Gross.domestic.product.2012)
names(sorted)
sorted %>% mutate_each_(funs(as.numeric), Gross.domestic.product.2012)
sorted = sorted %>% mutate_each_(funs(as.numeric), Gross.domestic.product.2012)
sorted = sorted %>% mutate(numRank = factro(Gross.domestic.product.2012))
sorted = sorted %>% mutate(numRank = factor(Gross.domestic.product.2012))
sorted
sorted = sorted %>% mutate(numRank = factor(Gross.domestic.product.2012)) %>% arrange(desc(numRank))
sorted
sorted = sorted %>% mutate(numRank = as.numeric(factor(Gross.domestic.product.2012)) %>% arrange(desc(numRank))
f
sorted = sorted %>% mutate(numRank = as.numeric(factor(Gross.domestic.product.2012))) %>% arrange(desc(numRank))
sorted
sorted = sorted %>% mutate(numRank = as.numeric(levels(Gross.domestic.product.2012))) %>% arrange(desc(numRank))
sorted
sorted = sorted %>% arrange(desc(numRank))
sorted
sorted = sorted %>% mutate(numRank = as.character(Gross.domestic.product.2012)) %>% arrange(desc(numRank))
sorted
sorted = sorted %>% mutate(numRank = as.numeric(numRank)) %>% arrange(desc(numRank))
sorted
head(sorted, 13)
filter(gdp, X=="KNA")
head(gdp, 15)
names(edu)
merged = merged %>% group_by(Income.Group)
merged %>% summarize(avgGdp = mean())
merged %>% summarize(avgGdp = mean)
head(gdp)
merged %>% summarize(avgGdp = mean(X.4))
merged %>% summarize(avgGdp = mean(X.3))
head(gdp,10)
merged
merged %>% summarize(avgGdp = mean(X.3))
str(gdp)
head(gdp)
merged = merged %>% mutate(X.3 = as.character(X.3)) %>% mutate(X.3 = as.numeric(X.3))
merged
str(merged)
merged  = merge(gdp, edu, by.x = "X", by.y = "CountryCode")
merged = merged %>% mutate(numGdp = as.character(X.3)) %>% mutate(numGdp = as.numeric(numGdp))
merged
select(merged, numGpd)
select(merged, numGdp)
select(merged, X,numGdp)
merged = merged %>% group_by(Income.Group)
merged
levels(merged$X.3)
converted = as.numeric(levels(merged$X.3))
converted
agri
agriData
with(agriData, ACR==3, AGS==6)
agriLogical=with(agriData, ACR==3, AGS==6)
wich(agriLogical)
witch(agriLogical)
which(agriLogical)
agriData[25]
agriData[25,]
agriLogical=with(agriData, ACR=="3", AGS=="6")
which(agricultureLogica)
which(agriLogical)
agriData[36,]
agriLogical=with(agriData, ACR=="3" & AGS=="6")
which(agriLogical)
quantile(img, c(0.30,0.80))
?read.csv
gpd = read.csv("gdp.csv", stringsAsFactors = T)
gdp = gpd
gdp
gdp = read.csv("gdp.csv", stringsAsFactors = T)
gdp = gdp %>% mutate(numGdpd = as.numeric(as.character(Gross.domestic.product.2012)))
gdp
str(gdp)
gdp %>% select(X,Gross.domestic.product.2012,numGdpd)
gdp %>% select(X,Gross.domestic.product.2012,numGdpd) %>% arrange(numGdpd)
gdp %>% select(X,Gross.domestic.product.2012,numGdpd) %>% arrange(desc(numGdpd))
edu = read.csv("educational.csv", stringsAsFactors = )
edu = read.csv("educational.csv", stringsAsFactors = T)
merged = merge(gdp, edu, by.x="X", by.y="CountryCode")
merged
merged = merged %>% group_by(Income.Group)
merged
merged = mutate(merged, numGdp = as.numeric(as.character(X.3))))
merged = mutate(merged, numGdp = as.numeric(as.character(X.3)))
merged
gdp = mutate(gdp, numProd = as.numeric(as.character(X.3)))
gdp
gdp = mutate(gdp, numProd = as.numeric(gsub(",","",X.3))
)
gdp
merged = merge(gdp, edu, by.x="X", by.y="CountryCode")
merged
merged = merged %>% group_by(Income.Group)
summarise(merged, avg = mean(numProd))
summarise(merged, avg = mean(numGdpd))
summarise(merged, avg = mean(numGdpd, na.rm = T))
?quantile
quantile(merged)
quantile(merged$numGdpd)
quantile(merged$numGdpd, na.rm = T)
table(merged)
table(merged, quantile(merged$numGdpd, na.rm = T))
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
tmp
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
source('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
row.names(videos)
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
row.names(tmp)
row.names(videos)
row.names(videos)
row.names(tmp)
row.names(videos)
row.names(tmp)
row.names(tmp)
row.names(tmp)
row.names(videos)
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
rownames(videos)
rownames(tmp)
rownames(videos);rownames(tmp)
rownames(videos);rownames(tmp)
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
rownames(videos);rownames(tmp)
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
debugSource('~/Documents/Travaglio/Personal/data science/petrolicious/scrape youtube channel.R')
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm,col="green", breaks = 100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4, col="magenta")
abline(v=median(ppm),col="magneta", lwd=4)
abline(v=median(ppm),col="magenta", lwd=4)
names(pollution)
table(pollution$region)
reg <0 table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east = subset(pollution, region="east")
east = subset(pollution, region=="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
plot(pollution, pm25~latitude)
plot(pollution, pm25~)
plot(pollution, pm25)
plot(pollution, latitude, pm25)
names(pollution)
with(pollution, plot(latitude, pm25))
abline(h=12)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(2,1), mar=c(5,4,2,1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west = subset(pollution, region=="west")
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
library(datasets)
data(cars)
with(cars,plot(speed, dist))
library(lattice)
state = data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
state.x77
state.region
install.packages("ggplot2")
library(ggplot2)
data(mpg)
qplot(displ, hwy, data= mpg)
names(mpg)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
library(datasets)
airquality = transform(airquality, Month=factor(Month))
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)")
?Devices
library(swirl)
swirl()
?Devices
with(faithful, plot(eruptions, waiting))
a
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
getwd()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed, max(cars$dist), "SWIRL rules!"))
text(mean(cars$speed, max(cars$dist), "SWIRL rules!"))
text(10,10, "SWIRL Rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income | region, state,c(4,1) )
xyplot(Life.Exp~Income | region, state,layout=c(4,1) )
xyplot(Life.Exp~Income | region, state,layout=c(2,2) )
head(mpg)
dim(mpg)
table(mpg$model)
qplot(dipl, hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
names(mpg)
qplot(displ, hwy, data=mpg)
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title("Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title("Ozone and Wind in New York City")
length(par())
par()
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = n)
plot(airquality$Wind, airquality$Ozone, type = "n")
title("Wind and Ozone in NYC")
may = subset(airquality, Month == 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone)
points(may$Wind, may$Ozone, col="blue, pch=17")
points(may$Wind, may$Ozone, col="blue, pch=17)
""
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("toprigh", pch=c(17, 8), col=c("blue", "red"), legend=c("May", "Other Months"))
legend("topright", pch=c(17, 8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(median(airquality$Wind), lty=2)
abline(median(airquality$Wind), 0,lty=2)
abline(median(v=airquality$Wind),lty=2, lwd=2)
abline(v=median(airquality$Wind),lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, title="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solora Radiation")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and SolaraRadiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar
| Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3),  mar = c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Wheather in New York City")
mtext("Ozone and Wheather in New York City", outer = TRUE)
mtext("Ozone and Weather in New York City", outer = TRUE)
setwd("/Users/edoardopedrotti/Documents/Travaglio/Personal/data science/ExData_Plotting1")
getwd()
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/exdata_plottin_get_data.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/exdata_plottin_get_data.R')
library(sqldf)
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/exdata_plottin_get_data.R')
getwd()
setwd("/Users/edoardopedrotti/Documents/Travaglio/Personal/data science/ExData_Plotting1")
getwd()
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/exdata_plottin_get_data.R')
data = read.csv.sql("data/household_power_consumption.txt", "select * from file where Date between '2007-02-01' and '2007-02-02'")
data = read.csv.sql("data/household_power_consumption.txt", "select * from file where Date between '01/02/2007' and '02/02/2007'")
data = read.csv.sql("data/household_power_consumption.txt", "select * from file where Date between '01/02/2007' and '02/02/2007'", sep = ";")
head(data)
data = read.csv("data/household_power_consumption.txt", sep=";")
head(data)
data = subset(data, Date == '01/02/2016' | Date == '02/02/2016')
head(data)
data = read.csv("data/household_power_consumption.txt", sep=";")
data = subset(data, Date == '01/02/2007' | Date == '02/02/2007')
head(data)
data
data = read.csv("data/household_power_consumption.txt", sep=";")
data[, Date == '01/02/2007']
names(data)
data[ Date == '01/02/2007',]
data[ data$Date == '01/02/2007',]
data[ ,data$Date == '01/02/2007']
data
fa
adfasd
sdf
[]
ads
data[data$Date == '01/02/2007',]
data[data$Date == '01/02/2007']
data[,data$Date == '01/02/2007']
data[data$Date == '01/02/2007']
head(data)
?subset
febData = subset(data, data$Date == '01/02/2007')
febData
data = read.csv.sql("data/household_power_consumption.txt", "select * from file where Date between '1/2/2007' and '2/2/2007'", sep = ";")
head(data)
data = read.csv.sql("data/household_power_consumption.txt", "select * from file where Date = '1/2/2007' or Date = '2/2/2007'", sep = ";")
head(data)
tail(data)
head(data)
tail(data)
names(data)
with(data, hist(Global_active_power))
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot1.R')
dev.off()
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot1.R')
?stprtime
?strptime
data
library(dplyr)
newDAta = data %>% mutate(dateTime = strptime(c(Date, Time)))
newDAta = data %>% mutate(dateTime = strptime(c(Date, Time), format="%Y-%m-%d %H:%M:%S")
)
newDAta = data %>% mutate(dateTime = strptime(c(Date, Time), format="%Y-%m-%d %H:%M:%S")
)
class(date$Date)
class(data$Date)
data$Date = as.Date(data$Date)
class(data$Date)
data$Time = strptime(data$Time)
data$Time = strptime(data$Time, format="%Y-%m-%d %H:%M:%S")
class(data$Time)
head(data$Date)
head(data$Time)
head(data)
data = read.csv.sql("data/household_power_consumption.txt", "select * from file where Date = '1/2/2007' or Date = '2/2/2007'", sep = ";")
head(data)
test = as.Date(data$Date, format = "%d/%m/%Y")
test
data$Date = as.Date(data$Date, format = "%d/%m/%Y")
head(data)
tail(data)
class(data$time)
class(data$Time)
?strptime
test = strptime(data$Time, format="%H:%M:%S")
test
?POSIXct
test = strptime(c(data@Date, data$Time), format="%H:%M:%S")
head(data)
test = paste(data$Date, data$Time)
test
head(test)
test = strptime(paste(date$Date, data$Time), format="%Y-%m-%d %H:%M:%S")
head(test)
tail(test)
test = strptime(test, format="%Y-%m-%d %H:%M:%S")
test
class(test)
names(data)
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot2.R')
class(data$Time)
length(data$Time)
length(data$Global_active_power)
?plot
with(data, plot(Time, Global_active_power)
)
test = as.integer(data$Time)
table(data$Date)
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot2.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot2.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot2.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot2.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot2.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot2.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
names(data)
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
source('~/Documents/Travaglio/Personal/data science/ExData_Plotting1/plot3.R')
